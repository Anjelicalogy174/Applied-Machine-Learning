{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "source": [
        "K Nearest Neighbors\n",
        "\n",
        "Castillo, Anjelica M."
      ],
      "metadata": {
        "id": "ZsKlY86EuJdx"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "1. Introduction\n",
        "\n",
        "\n",
        "This report documents the use of the K-Nearest Neighbors (KNN) algorithm for classification on the Breast Cancer Wisconsin Diagnostic dataset. KNN is a non-parametric, instance-based learning algorithm that classifies data based on the majority vote of its neighbors. It is particularly useful for pattern recognition tasks and performs well with balanced datasets\n",
        "\n"
      ],
      "metadata": {
        "id": "yeZoH45SuUCT"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "2. Dataset Description\n",
        "\n",
        "The Breast Cancer dataset from sklearn.datasets contains 569 samples with 30 numeric features. The classification task is to determine whether a tumor is malignant (0) or benign (1).\n"
      ],
      "metadata": {
        "id": "xyxLjZbsugOo"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.datasets import load_breast_cancer\n",
        "import pandas as pd\n",
        "\n",
        "# Load dataset\n",
        "data = load_breast_cancer()\n",
        "\n",
        "# Convert to pandas DataFrame\n",
        "df = pd.DataFrame(data.data, columns=data.feature_names)\n",
        "df['target'] = data.target\n",
        "\n",
        "# Display the first few rows\n",
        "print(df.head())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "83CIV-VPupgi",
        "outputId": "372292d6-f2bc-40e4-fe29-2af08fc1aac2"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "   mean radius  mean texture  mean perimeter  mean area  mean smoothness  \\\n",
            "0        17.99         10.38          122.80     1001.0          0.11840   \n",
            "1        20.57         17.77          132.90     1326.0          0.08474   \n",
            "2        19.69         21.25          130.00     1203.0          0.10960   \n",
            "3        11.42         20.38           77.58      386.1          0.14250   \n",
            "4        20.29         14.34          135.10     1297.0          0.10030   \n",
            "\n",
            "   mean compactness  mean concavity  mean concave points  mean symmetry  \\\n",
            "0           0.27760          0.3001              0.14710         0.2419   \n",
            "1           0.07864          0.0869              0.07017         0.1812   \n",
            "2           0.15990          0.1974              0.12790         0.2069   \n",
            "3           0.28390          0.2414              0.10520         0.2597   \n",
            "4           0.13280          0.1980              0.10430         0.1809   \n",
            "\n",
            "   mean fractal dimension  ...  worst texture  worst perimeter  worst area  \\\n",
            "0                 0.07871  ...          17.33           184.60      2019.0   \n",
            "1                 0.05667  ...          23.41           158.80      1956.0   \n",
            "2                 0.05999  ...          25.53           152.50      1709.0   \n",
            "3                 0.09744  ...          26.50            98.87       567.7   \n",
            "4                 0.05883  ...          16.67           152.20      1575.0   \n",
            "\n",
            "   worst smoothness  worst compactness  worst concavity  worst concave points  \\\n",
            "0            0.1622             0.6656           0.7119                0.2654   \n",
            "1            0.1238             0.1866           0.2416                0.1860   \n",
            "2            0.1444             0.4245           0.4504                0.2430   \n",
            "3            0.2098             0.8663           0.6869                0.2575   \n",
            "4            0.1374             0.2050           0.4000                0.1625   \n",
            "\n",
            "   worst symmetry  worst fractal dimension  target  \n",
            "0          0.4601                  0.11890       0  \n",
            "1          0.2750                  0.08902       0  \n",
            "2          0.3613                  0.08758       0  \n",
            "3          0.6638                  0.17300       0  \n",
            "4          0.2364                  0.07678       0  \n",
            "\n",
            "[5 rows x 31 columns]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "3. KNN Implementation in Python\n",
        "\n",
        "The implementation involves standardizing the dataset using StandardScaler, splitting it into training and test sets, and evaluating KNN using various combinations of hyperparameters: number of neighbors (k), distance metric, and weight function."
      ],
      "metadata": {
        "id": "ybFL_wTBuwrp"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.datasets import load_breast_cancer\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "from sklearn.neighbors import KNeighborsClassifier\n",
        "from sklearn.metrics import accuracy_score, classification_report, confusion_matrix\n",
        "\n",
        "# Standardize the features\n",
        "scaler = StandardScaler()\n",
        "X_scaled = scaler.fit_transform(X)\n",
        "\n",
        "# Train-test split\n",
        "X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42)\n",
        "\n",
        "# Create and train KNN model\n",
        "knn = KNeighborsClassifier(n_neighbors=5)  # You can change k value\n",
        "knn.fit(X_train, y_train)\n",
        "\n",
        "# Make predictions\n",
        "y_pred = knn.predict(X_test)\n",
        "\n",
        "# Evaluate the model\n",
        "accuracy = accuracy_score(y_test, y_pred)\n",
        "print(f\"Accuracy: {accuracy:.4f}\")\n",
        "print(\"\\nClassification Report:\\n\", classification_report(y_test, y_pred))\n",
        "print(\"Confusion Matrix:\\n\", confusion_matrix(y_test, y_pred))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "neO93cdzvE3B",
        "outputId": "9a17b9e5-3f33-4e8e-c662-a900c809ebde"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Accuracy: 0.9474\n",
            "\n",
            "Classification Report:\n",
            "               precision    recall  f1-score   support\n",
            "\n",
            "           0       0.93      0.93      0.93        43\n",
            "           1       0.96      0.96      0.96        71\n",
            "\n",
            "    accuracy                           0.95       114\n",
            "   macro avg       0.94      0.94      0.94       114\n",
            "weighted avg       0.95      0.95      0.95       114\n",
            "\n",
            "Confusion Matrix:\n",
            " [[40  3]\n",
            " [ 3 68]]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "from sklearn.metrics import confusion_matrix\n",
        "\n",
        "# Actual confusion matrix values from your result\n",
        "cm = [[40, 3],\n",
        "      [3, 68]]\n",
        "\n",
        "# Plot confusion matrix as a heatmap\n",
        "plt.figure(figsize=(6, 5))\n",
        "sns.heatmap(cm, annot=True, fmt='d', cmap='Blues',\n",
        "            xticklabels=['Malignant', 'Benign'],\n",
        "            yticklabels=['Malignant', 'Benign'])\n",
        "\n",
        "plt.title('KNN Confusion Matrix (k = 5)')\n",
        "plt.xlabel('Predicted Label')\n",
        "plt.ylabel('True Label')\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 507
        },
        "id": "Cosi3ZbLwvCg",
        "outputId": "523855c4-f187-47a2-94bc-b9cb0896bbaf"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 600x500 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Split into training and test sets\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
        "\n",
        "# Hyperparameters to test\n",
        "k_values = [3, 5, 7]\n",
        "metrics = ['minkowski', 'euclidean', 'manhattan']\n",
        "weights = ['uniform', 'distance']\n",
        "\n",
        "# Store results\n",
        "results = []\n",
        "exp_no = 1\n",
        "\n",
        "for k in k_values:\n",
        "    for metric in metrics:\n",
        "        for weight in weights:\n",
        "            model = KNeighborsClassifier(n_neighbors=k, metric=metric, weights=weight)\n",
        "            model.fit(X_train, y_train)\n",
        "            y_pred = model.predict(X_test)\n",
        "            acc = accuracy_score(y_test, y_pred)\n",
        "            results.append({\n",
        "                'Experiment No.': exp_no,\n",
        "                'k (Neighbors)': k,\n",
        "                'Distance Metric': metric.capitalize(),\n",
        "                'Weight': weight.capitalize(),\n",
        "                'Accuracy': round(acc, 4)\n",
        "            })\n",
        "            exp_no += 1\n",
        "\n",
        "# Convert to DataFrame\n",
        "results_df = pd.DataFrame(results).sort_values(by='Accuracy', ascending=False).reset_index(drop=True)\n",
        "\n",
        "# Display top results\n",
        "print(results_df.head(10))\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "5geKGrlXxeKY",
        "outputId": "dd0142ee-14fd-47af-f801-70b6e3a42105"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "   Experiment No.  k (Neighbors) Distance Metric    Weight  Accuracy\n",
            "0               9              5       Euclidean   Uniform    0.9561\n",
            "1              10              5       Euclidean  Distance    0.9561\n",
            "2              15              7       Euclidean   Uniform    0.9561\n",
            "3              13              7       Minkowski   Uniform    0.9561\n",
            "4               8              5       Minkowski  Distance    0.9561\n",
            "5               7              5       Minkowski   Uniform    0.9561\n",
            "6              14              7       Minkowski  Distance    0.9474\n",
            "7              16              7       Euclidean  Distance    0.9474\n",
            "8              11              5       Manhattan   Uniform    0.9474\n",
            "9              12              5       Manhattan  Distance    0.9474\n"
          ]
        }
      ]
    }
  ]
}